#!/usr/bin/env python

# simple notebook app


import sys
sys.path.insert(0, '..')

import pynotebook
from pynotebook.nbview import TextModel, NBView
from pynotebook.nbtexels import strip_output, mk_textmodel
from pynotebook import graphics
import wx


wildcard = "Pynotebook files (*.pnb)|*.pnb|" \
           "Python source (*.py)|*.py|" \
           "All files (*.*)|*.*"

class MainWindow(wx.Frame):
    ctxt_entries = ['new', 'open', 'save', 'save_as', 'remove_output', 'close']
    file_entries = ['new', 'open', 'save', 'save_as', 'close']
    def __init__(self, filename=None):
        wx.Frame.__init__(self, None)
        panel = wx.Panel(self, -1)
        shell = NBView(panel, -1, style=wx.SUNKEN_BORDER, filename=filename)
        box = wx.BoxSizer(wx.VERTICAL)
        box.Add(shell, 1, wx.ALL|wx.GROW, 1)
        panel.SetSizer(box)
        panel.SetAutoLayout(True)
        shell.Bind(wx.EVT_RIGHT_DOWN, self.right_click)
        shell.SetFocus()
        self.shell = shell
        self.filename = filename
        self.SetMenuBar(self.make_menubar())
        self.Bind(wx.EVT_IDLE, self.update_filename)
        
    def make_menubar(self):
        menubar = wx.MenuBar()
        menu = wx.Menu()
        for entry in self.ctxt_entries:
            fun = getattr(self, entry)
            title = fun.__doc__
            item = menu.Append(-1, title)
            self.Bind(wx.EVT_MENU, fun, item)
        menubar.Append(menu, '&File')
        return menubar

    def make_ctxtmenu(self):
        menu = wx.Menu()
        for entry in self.ctxt_entries:
            fun = getattr(self, entry)
            title = fun.__doc__
            item = menu.Append(-1, title)
            self.Bind(wx.EVT_MENU, fun, item)
        return menu

    def changed(self):
        return self.shell.undocount()>0

    def update_filename(self, event):
        if self.filename:
            title = self.filename
        else:
            title = '<unnamed>'
        if self.changed():
            title = title+' *'
        self.SetTitle(title)

    def new(self, event):
        "&New Notebook\tCtrl-N"
        win = MainWindow()
        win.Show()

    def open(self, event):
        "&Open File ...\tCtrl-O"
        dlg = wx.FileDialog(
            self, message="Choose a file",
            #defaultDir=self.currentDirectory, 
            #defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.MULTIPLE | wx.CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            paths = dlg.GetPaths()
            for path in paths:
                win = MainWindow(path)
                win.Show()
        dlg.Destroy()

    def save(self, event):
        "&Save\tCtrl-s"
        if self.filename is None:
            self.save_as(event)
        else:
            self.shell.save(self.filename)
            self.shell.clear_undo()
            
    def save_as(self, event):
        "Save &As ..."
        dlg = wx.FileDialog(
            self, message="Save file as ...", 
            #defaultDir=self.currentDirectory, 
            defaultFile="", wildcard=wildcard, style=wx.SAVE
            )
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.shell.save(path)
            self.filename = path
            self.shell.clear_undo()

        dlg.Destroy()

    def close(self, event):
        "&Close\tCtrl-w"
        if self.changed():
            dlg = wx.MessageDialog(
                self, 'There are unsaved changes. Do you really want to close?',
                'Close window',
                #wx.OK | wx.ICON_INFORMATION
                wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
            )
            result = dlg.ShowModal()
            dlg.Destroy()
            if result != wx.ID_YES:
                return            
        self.Close(True)

    def remove_output(self, event):
        "Remove output"
        texel = self.shell.model.texel
        model = mk_textmodel(strip_output(texel))
        self.shell.model = model
        # XXX add undo
        # XXX restrict cursor to length of new model
        
    def right_click( self, event):
        menu = self.make_ctxtmenu()
        self.PopupMenu(menu, event.Position)
        menu.Destroy() # destroy to avoid mem leak

        


def main():
    debug = 0
    if debug:
        redirect = True
    else:
        redirect = False
    app = wx.App(redirect=redirect)
    win = None
    
    for arg in sys.argv[1:]:
        # Arguments are notebook files. Each file is opened in a seperate
        # window.
        win = MainWindow(arg)
        win.Show()
    if win is None:
        win = MainWindow()
        win.Show()

    if debug: 
        from pynotebook.wxtextview import testing
        testing.pyshell()    

    app.MainLoop()

# Register classes to the fileformat
graphics.register_classes()


main()
